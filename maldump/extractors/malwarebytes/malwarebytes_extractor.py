import logging

from maldump.collectors.building_block import BuildingBlock
from maldump.extractors.extractor import Extractor
from maldump.structures import QuarEntry
from maldump.utils import CustomArc4
from maldump.utils import Logger as log
from maldump.utils import Reader as read

logger = logging.getLogger(__name__)


class MalwarebytesExtractor(Extractor):

    @log.log(lgr=logger)
    def _decrypt(self, plaintext: bytes) -> bytes:
        key = bytes(
            [
                0x03,
                0x7A,
                0x55,
                0xC5,
                0xDF,
                0x39,
                0xD2,
                0x89,
                0x7F,
                0xEF,
                0x88,
                0x3D,
                0xC0,
                0x47,
                0xB3,
                0x17,
            ]
        )
        return CustomArc4(key).decode(plaintext)

    @BuildingBlock._comp_wrapper
    def compute(self) -> QuarEntry:
        logger.debug('Parsing entry, path "%s"', self.quarentry.local_path)

        # TODO:
        # uid = entry.name.rstrip(".quar")
        # if uid in data:
        #     logger.debug("Entry (idx %s) already found, skipping", idx)
        #     continue

        malfile = read.contents(self.quarentry.local_path)
        malfile = b"" if malfile is None else self._decrypt(malfile)

        self.quarentry.malfile = malfile
        # TODO
        # quarfiles[uid] = q

        return self.quarentry
