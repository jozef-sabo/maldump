import json
import logging
from datetime import datetime

from maldump.utils import CustomArc4
from maldump.collectors.building_block import BuildingBlock
from maldump.collectors.parser import Parser
from maldump.structures import QuarEntry
from maldump.utils import Logger as log
from maldump.utils import Reader as read

logger = logging.getLogger(__name__)


class MalwarebytesMetadataParser(Parser):

    @log.log(lgr=logger)
    def _decrypt(self, plaintext: bytes) -> bytes:
        key = bytes(
            [
                0x03,
                0x7A,
                0x55,
                0xC5,
                0xDF,
                0x39,
                0xD2,
                0x89,
                0x7F,
                0xEF,
                0x88,
                0x3D,
                0xC0,
                0x47,
                0xB3,
                0x17,
            ]
        )
        return CustomArc4(key).decode(plaintext)

    @log.log(lgr=logger)
    def _normalize_time(self, date: str) -> datetime:
        return datetime.strptime(date, "%Y-%m-%dT%H:%M:%SZ")

    @BuildingBlock._comp_wrapper
    def compute(self) -> list[QuarEntry]:
        logger.info("Parsing from log in %s", self.__class__.__name__)
        quarfiles = []

        for idx, metafile in enumerate(self.path.glob("*.data")):
            logger.debug('Parsing entry, idx %s, path "%s"', idx, metafile)
            metadata = read.contents(metafile)
            if metadata is None:
                logger.debug('Skipping entry idx %s, path "%s"', idx, metafile)
                continue

            decrypted = self._decrypt(metadata)
            metadata = json.loads(decrypted)

            # Open corresponding malfile
            # uid = metadata["trace"]["objectID"]

            # malfile = read.contents(self.location / (uid + ".quar"))
            # malfile = b"" if malfile is None else self._decrypt(malfile)

            q = QuarEntry(self)
            q.timestamp = self._normalize_time(metadata["trace"]["cleanTime"])
            q.threat = metadata["threatName"]
            q.path = metadata["trace"]["objectPath"]
            q.local_path = None  # TODO: local path -  self.location / (uid + ".quar")
            q.md5 = metadata["trace"]["objectMD5"].lower()
            # q.malfile = malfile
            # quarfiles[uid] = q
            quarfiles.append(q)

        return quarfiles
